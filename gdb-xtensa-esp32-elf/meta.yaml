{% set name = "xtensa-esp32-elf-gdb" %}
{% set version = "11.1_20220318" %}
{% set release_url = "https://github.com/espressif/binutils-gdb/releases/download" %}

package:
  name: {{ name }}
  version: {{ version }}.memfault0

source:
  - url: {{ release_url }}/esp-gdb-v{{ version }}/xtensa-esp-elf-gdb-{{ version }}-x86_64-apple-darwin14.tar.gz  # [osx and x86_64]
    sha256: 18324682734ca2a23a45c5505f7bc1824336f88a4d59327d545083dc8a633bba  # [osx and x86_64]

  # an actual [osx and arm64] variant is not available as of 2022-07-29.
  # Instead, install the x86_64 one as if it's native. this seems to work in
  # practice, since this is binary repackaging. I've filed this ticket asking
  # for help from espressif on this topic:
  #
  # https://github.com/espressif/esp-idf/issues/9459
  - url: {{ release_url }}/esp-gdb-v{{ version }}/xtensa-esp-elf-gdb-{{ version }}-x86_64-apple-darwin14.tar.gz  # [osx and arm64]
    sha256: 18324682734ca2a23a45c5505f7bc1824336f88a4d59327d545083dc8a633bba  # [osx and arm64]

  - url: {{ release_url }}/esp-gdb-v{{ version }}/xtensa-esp-elf-gdb-{{ version }}-x86_64-linux-gnu.tar.gz  # [linux64]
    sha256: c2bfb97c61fa3d2e3720aa1cc8163806a8bc712a173a374b60f6f5c061d33d3f  # [linux64]

  - url: {{ release_url }}/esp-gdb-v{{ version }}/xtensa-esp-elf-gdb-{{ version }}-x86_64-w64-mingw32.zip  # [win]
    sha256: b1bff9ee6b2a0025f33a9ddc97b92bab7578c11172c06e38a7483f98e157fb93  # [win]

  # wrapper scripts for the various supported flavors of esp32
  - path: xtensa-esp32-elf-gdb
  - path: xtensa-esp32s2-elf-gdb
  - path: xtensa-esp32s3-elf-gdb


build:
  number: '3'
  skip: True  # [win]

  binary_relocation: False # [osx]
  detect_binary_files_with_prefix: False # [osx]
  ignore_prefix_files: True # [osx]

  ignore_run_exports:
    - expat*  # [linux]

  missing_dso_whitelist:
    - $RPATH/libdl.so.2  # [linux]
    - $RPATH/libm.so.6  # [linux]
    - $RPATH/libpthread.so.0  # [linux]
    - $RPATH/libc.so.6  # [linux]
    - /lib64/ld-linux-x86-64.so.2  # [linux]
    - /Library/Frameworks/Python.framework/Versions/*/Python # [osx]

requirements:
  host:
    - python {{ python }}
    # - ncurses {{ ncurses }}
    # - xz {{ xz }}
    - zlib {{ zlib }}
    # - libiconv {{ libiconv }}
    # - mpfr {{ mpfr }}
    # - gmp {{ gmp }}
    - expat {{ expat }} # [linux]
  run:
    - python {{ python }}
    # - ncurses {{ ncurses }}
    # - xz {{ xz }}
    - zlib {{ zlib }}
    # - libiconv {{ libiconv }}
    # - mpfr {{ mpfr }}
    # - gmp {{ gmp }}
    - expat {{ expat }} # [linux]

test:
  commands:
    # test the wrappers
    - xtensa-esp32-elf-gdb -ex "print 1" --batch
    - xtensa-esp32s2-elf-gdb -ex "print 1" --batch
    - xtensa-esp32s3-elf-gdb -ex "print 1" --batch

about:
  home: https://www.gnu.org/software/gdb/
  license: GPL-2.0
  license_family: GPL
  # license_file: binutils-gdb-esp32-src/COPYING
  summary: GDB, the GNU Project debugger, allows you to see what is going on inside another program while it executes -- or what another program was doing at the moment it crashed.
  description: |
    GDB, the GNU Project debugger, allows you to see what is going on `inside'
    another program while it executes -- or what another program was doing at
    the moment it crashed.
    The program being debugged can be written in Ada, C, C++, Objective-C,
    Pascal (and many other languages). Those programs might be executing on the
    same machine as GDB (native) or on another machine (remote).
    GDB can run on most popular UNIX and Microsoft Windows variants.
  doc_url: https://sourceware.org/gdb/current/onlinedocs/gdb/
  dev_url: git://sourceware.org/git/binutils-gdb.git

extra:
  recipe-url: https://github.com/memfault/conda-recipes/tree/master/gdb-xtensa-esp32-elf
